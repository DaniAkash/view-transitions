---

---

<link
  rel="stylesheet"
  href="/node_modules/reveal.js/dist/reveal.css"
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
/>
<link
  rel="stylesheet"
  href="/node_modules/reveal.js/dist/theme/black.css"
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
/>
<link
  rel="stylesheet"
  href="/node_modules/reveal.js/plugin/highlight/monokai.css"
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
/>
<div class="reveal !h-[calc(100vh-64px)] !w-screen">
  <div class="slides">
    <section data-auto-animate>
      <p>I'm Dani Akash</p>
    </section>
    <section data-auto-animate>
      <p>I'm Dani Akash</p>
      <ul>
        <li class="fragment">Know JavaScript & React</li>
        <li class="fragment">Work at Clarifai</li>
        <li class="fragment">Like Science, Sci-fi and WorldBuilding</li>
        <li class="fragment">On a journey to platinum all Souls Games</li>
      </ul>
    </section>
    <section data-auto-animate>
      <p>View Transitions API</p>
      <p>Making boring websites exciting!</p>
    </section>
    <section data-auto-animate>
      <p>View Transitions API</p>
    </section>
    <section data-auto-animate>
      <p>What does view transitions mean?</p>
      <p class="fragment text-left text-[18px]">
        View transitions offer a way to animate the transition between different
        views in a web application.
      </p>
      <small class="fragment w-full text-right text-[14px]"
        >- <a
          href="https://www.debugbear.com/blog/view-transitions-spa-without-framework"
          target="_blank"
        >
          Debug Bear</a
        ></small
      >
    </section>
    <!-- <section>
      <pre
        class="fragment"><code data-trim data-noescape>{`@view-transition {
  navigation: auto;
}
`}</code></pre>
      <p class="fragment">This will animate most components</p>
    </section> -->
    <section data-auto-animate>
      Let's see a demo!
      <div
        data-id="box"
        class="flex h-28 w-28 items-center justify-center bg-red-500"
      >
      </div>
    </section>
    <section data-auto-animate>
      Let's see a demo!
      <div
        data-id="box"
        class="ml-96 flex h-28 w-28 items-center justify-center bg-red-500"
      >
      </div>
    </section>
    <section>
      <pre><code data-trim data-noescape data-line-numbers="1|4">
{`const $box = document.getElementById("my-box");

const moveBox = () => {
  $box.classList.toggle("translate-x-36");
};`}</code></pre>
    </section>
    <section>
      <pre><code data-trim data-noescape>{`> npm i @ai-sdk/openai`}</code></pre>
    </section>
    <section>
      <pre><code data-trim data-noescape data-line-numbers="1-16|1-2|3-7|9|11-14|16">
{`import { createOpenAI } from "@ai-sdk/openai";
import { convertToCoreMessages, streamText } from "ai";

const openai = createOpenAI({
  compatibility: "strict",
  apiKey: import.meta.env.OPENAI_API_KEY,
});

const coreMessages = convertToCoreMessages(messages);

const response = streamText({
  model: openai("gpt-4o"),
  messages: coreMessages,
});

return response.toDataStreamResponse();
`}</code></pre>
    </section>
    <section>
      <pre><code data-trim data-noescape data-line-numbers="1-23|1|6-21|8-12|13-20">
{`import { z } from "zod";

const response = streamText({
  model: openai("gpt-4o"),
  messages: coreMessages,
  tools: {
    getWeather: {
      description: "Get the current weather at a location",
      parameters: z.object({
        latitude: z.number(),
        longitude: z.number(),
      }),
      execute: async ({ latitude, longitude }) => {
        const response = await fetch(
          \`https://api.open-meteo.com/v1/forecast?latitude=\${latitude}&longitude=\${longitude}&current=temperature_2m&hourly=temperature_2m&daily=sunrise,sunset&timezone=auto\`,
        );

        const weatherData = await response.json();
        return weatherData;
      },
    },
  }
});
`}</code></pre>
    </section>
    <section>
      <pre><code data-trim data-noescape data-line-numbers>
{`createCodeBlock: {
  description: "Create a code block",
  parameters: z.object({
    code: z.string(),
    language: z.string(),
  }),
  execute: async ({ code, language }) => {
    return { code, language };
  },
},
`}</code></pre>
    </section>
    <section>
      <p class="">RAG</p>
      <p class="fragment text-left text-[18px]">
        Retrieval-Augmented Generation (RAG) is a machine learning framework
        that combines retrieved information from external knowledge bases with
        generative models to produce accurate and contextually rich outputs.
      </p>
      <small class="fragment w-full text-right text-[14px]"
        >- <a
          href="https://cloud.google.com/use-cases/retrieval-augmented-generation"
          target="_blank"
        >
          Google Cloud</a
        ></small
      >
    </section>
    <section>
      <ol>
        <li>Embeddings</li>
        <li><a href="https://chunkers.vercel.app/">Chunks</a></li>
      </ol>
    </section>
    <section>Let's see a demo!</section>
    <section>
      <p>All the tech used in this talk:</p>
      <ul>
        <li class="fragment">Astro</li>
        <li class="fragment">Tailwind CSS</li>
        <li class="fragment">Reveal.js</li>
        <li class="fragment">AI SDK by Vercel</li>
        <li class="fragment">Drizzle ORM + Postgres</li>
        <li class="fragment">Cloudflare Workers</li>
        <li class="fragment">semantic-chunking</li>
        <li class="fragment">motion/react</li>
      </ul>
    </section>
    <section>
      <p>Github Repos</p>
      <ul>
        <li class="fragment">
          Slides used in the talk - <a
            href="https://github.com/DaniAkash/ai-for-frontend-developers"
            >DaniAkash/ai-for-frontend-developers</a
          >
        </li>
        <li class="fragment">
          POC - <a
            href="https://github.com/DaniAkash/DaniAkash/releases/tag/v0.0.1-ai"
            >DaniAkash/DaniAkash@v0.0.1-ai</a
          >
        </li>
      </ul>
      <p class="fragment">
        or find them all + my previous talks @ daniakash.com/speaking
      </p>
    </section>
    <section>
      <p>Connect with me on:</p>
      <ul>
        <li>ùïè&nbsp;&nbsp;: @dani_akash_</li>
        <li>ü¶ã: @daniakash.com</li>
      </ul>
      <p class="text-center">
        <span class="text-[26px]"
          >I also run a newsletter to talk about science, tech & dev tools:</span
        >
        daniakash.com/newsletter&nbsp;&nbsp;üìß
      </p>
    </section>
  </div>
</div>
<script>
  import Reveal from "reveal.js";
  import Markdown from "reveal.js/plugin/markdown/markdown.esm.js";
  import Highlight from "reveal.js/plugin/highlight/highlight.esm.js";
  import Notes from "reveal.js/plugin/notes/notes.esm.js";

  let deck = new Reveal({
    plugins: [Markdown, Highlight, Notes],
    embedded: true,
    hash: true,
  });
  deck.initialize();
</script>
